/* here we are using external css */
body{
    background-color: black;
}
h1{
    color: white;
}
#p1{
    font-size: 20px;
    color: red;
}
#p2{
    font-size: 20px;
    color:rgb(0, 255, 255)
}
#p3{
    font-size: 15px;
    color: hsl(240, 100%, 50%);
}
/* to use for specific things of html we make id for the elements and use the #idname and then style it in css*/
.odd{
    color:#d2691e
}
.even{
    color:blueviolet
}
.green {
    color: green;
    }

.bold {
    font-weight: bold;
    text-transform: uppercase;
    }

img[src*='winter'] {
    height: 50px;
    }
    
img[src*='summer'] {
height: 100px;
}
a[href*='florence'] {
    color: lightgreen;
  }

p:hover {
background-color: lime;
}



/*IMP*/
 /*a{
    this is rule set
 }
 a is selector inside property and value */

/*so when we use classes where all ele under same class ka styling we use .classname and style in css */
/*
colors can be using normal names 
or using rgb(then values)
or hexadecimal format #values
or hsl format hsl(then one value,2 percentages)
*/

/* we have something called as universal selector 
    *{
        border:3px solid red;
    }
    the * is universal selector it will change of all (if property of text all text here border so all)
*/

/*
  a class attrbute can have multiple class names separated with space and in css we have different class
  ka styles and then so diff classes will be there and class name we use different all together will work
    ex:     .green {
                color: green;
                }

            .bold {
                font-weight: bold;
                text-transform: uppercase;
                }
            <h1 class='green bold'> ... </h1>
    sometimes both id and class together can be used
*/

/*
    we can use attribute selector also insted of id and all we use attribute all having attribute in element
    that will change
    to work we do
    like [attribute] or type of attribute[attribute="value"] or [attribute^="value"] or [attribute$="value"] or [attribute*="
        ex: [href]{
                color: magenta; so here all elements having href the value of color of element will change
                }
        ex:
        <img src='/images/seasons/cold/winter.jpg'>
        <img src='/images/seasons/warm/summer.jpg'>
         img[src*='winter'] { so here all img ka has src attribute and has winter string uska change
            height: 50px;
            }

            img[src*='summer'] {
            height: 100px;
            }
*/
/*
    Pseudo-class
    You may have observed how the appearance of certain elements can change, or be in a different state,
    after certain user interactions. For instance:

    When you click on an <input> element, and a blue border is added showing that it is in focus.
    When you click on a blue <a> link to visit to another page, but when you return the link’s text is purple.
    When you’re filling out a form and the submit button is grayed out and disabled.
    But when all of the fields have been filled out, the button has color showing that it’s active.
    These are all examples of pseudo-class selectors in action! 

    In fact, :focus, :visited, :disabled, and :active are all pseudo-classes. 

    Factors such as user interaction, site navigation, and position in the document tree can all give 
    elements a different state with pseudo-class.

    A pseudo-class can be attached to any selector. It is always written as a colon : followed by a name. 
    For example p:hover.
    p:hover {
        background-color: lime;
        }

*/

/* Specificity
    IDs are the most specific selector in CSS, followed by classes, and finally, type. 
    so if we have para with class and in css we have type selector(p{}) and class selector(.classname{})
    the properties of class will be taken as class is more specifice than type (id more specific than both)
    having more than just selectors will increase the specificity like p and .main p so use of chaining
    and specificty makes .main p more specific
*/

/*
    Chaining
    When writing CSS rules, it’s possible to require an HTML element to have two or more CSS selectors 
    at the same time.

    This is done by combining multiple selectors, which we will refer to as chaining. 
    For instance, if there was a special class for <h1> elements, the CSS would look like below:
        h1.special {
            so select h1 ele having classname  as special 
        }
*/

/*
    Descendant Combinator
    In addition to chaining selectors to select elements, CSS also supports selecting elements that are
    nested within other HTML elements, also known as descendants. For instance, consider the following HTML:
    <ul class='main-list'>
        <li> ... </li>
        <li> ... </li>
        <li> ... </li>
    </ul>
    .main-list li{ selects main list and from that selects li element
    }
*/

/*
    Multiple Selectors
    In order to make CSS more concise, it’s possible to add CSS styles to multiple CSS selectors all at once.
    This prevents writing repetitive code.

    For instance, the following code has repetitive style attributes:
        h1 {
        font-family: Georgia;
        }

        .menu {
        font-family: Georgia;
        }
    instead of this we can have
        h1, .menu {
            font-family: Georgia;
        }
    By separating the CSS selectors with a comma, both the <h1> elements and the elements 
    with the menu class will receive the font-family: Georgia styling.

    li h4{} and li,h4{} is diff first is li ele having h4(descendent) second is for both li and h4 use
*/



/*
    REVIEW
    The basic anatomy of CSS syntax written for both inline styles and stylesheets.
    Some commonly used CSS terms, such as ruleset, selector, and declaration.
    CSS inline styles can be written inside the opening HTML tag using the style attribute.
    Inline styles can be used to style HTML, but it is not the best practice.
    An internal stylesheet is written using the <style> element inside the <head> element of an HTML file.
    Internal stylesheets can be used to style HTML but are also not best practice.
    An external stylesheet separates CSS code from HTML, by using the .css file extension.
    External stylesheets are the best approach when it comes to using HTML and CSS.
    External stylesheets are linked to HTML using the <link> element.
*/